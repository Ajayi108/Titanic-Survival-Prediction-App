stages:
  - build

variables:
  # Define the base image path for your container registry
  CI_IMAGE_PREFIX: mygit.th-deg.de:5050/schober-teaching/student-projects/ain-23-software-engineering/ss-25/icebergai
  # This variable is required to enable TLS communication between the Docker client and the dind service.
  DOCKER_TLS_CERTDIR: "/certs"

# This template job defines the common steps for building and pushing Docker images.
.build_and_push_template: &build_and_push_definition
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  before_script:
    # Wait for the Docker daemon to be ready.
    - while ! docker info; do sleep 1; done
    # Log in to the GitLab container registry
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # SIMPLIFIED BUILD COMMAND:
    # We remove the '-f' flag. Docker will automatically look for a file named 'Dockerfile'
    # at the root of the directory provided (the BUILD_CONTEXT).
    - docker build -t "$CI_REGISTRY_IMAGE" "$BUILD_CONTEXT"
    # Push the Docker image to the container registry
    - docker push "$CI_REGISTRY_IMAGE"

build-web-frontend:
  # Inherit the common steps from the template
  <<: *build_and_push_definition
  variables:
    # Define the specific variables for this job
    CI_REGISTRY_IMAGE: "$CI_IMAGE_PREFIX/web-frontend:latest"
    # This is the build context directory. Docker will look for 'web-frontend/Dockerfile'.
    BUILD_CONTEXT: "web-frontend"

build-web-backend:
  <<: *build_and_push_definition
  variables:
    CI_REGISTRY_IMAGE: "$CI_IMAGE_PREFIX/web-backend:latest"
    # This is the build context directory. Docker will look for 'web-backend/Dockerfile'.
    BUILD_CONTEXT: "web-backend"

build-model-backend:
  <<: *build_and_push_definition
  variables:
    CI_REGISTRY_IMAGE: "$CI_IMAGE_PREFIX/model-backend:latest"
    # This is the build context directory. Docker will look for 'model-backend/Dockerfile'.
    BUILD_CONTEXT: "model-backend"