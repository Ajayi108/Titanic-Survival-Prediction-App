stages:
  - test
  - build

variables:
  DOCKER_DRIVER: overlay2

# Simple test job to verify pipeline works
test_pipeline:
  stage: test
  image: alpine:latest
  script:
    - echo "Pipeline is working!"
    - echo "Commit $CI_COMMIT_SHA"
    - echo "Branch $CI_COMMIT_BRANCH"

# Build using Kaniko (Docker-less approach)
.kaniko_build: &kaniko_build
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  timeout: 30m

build-web-frontend:
  <<: *kaniko_build
  script:
    - /kaniko/executor
      --context $CI_PROJECT_DIR/web-frontend
      --dockerfile $CI_PROJECT_DIR/web-frontend/Dockerfile
      --destination $CI_REGISTRY/$CI_PROJECT_PATH/web-frontend:$CI_COMMIT_SHA
      --destination $CI_REGISTRY/$CI_PROJECT_PATH/web-frontend:latest
  when: manual

build-web-backend:
  <<: *kaniko_build
  script:
    - /kaniko/executor
      --context $CI_PROJECT_DIR/web-backend
      --dockerfile $CI_PROJECT_DIR/web-backend/Dockerfile
      --destination $CI_REGISTRY/$CI_PROJECT_PATH/web-backend:$CI_COMMIT_SHA
      --destination $CI_REGISTRY/$CI_PROJECT_PATH/web-backend:latest
  when: manual

build-model-backend:
  <<: *kaniko_build
  script:
    - /kaniko/executor
      --context $CI_PROJECT_DIR/model-backend
      --dockerfile $CI_PROJECT_DIR/model-backend/Dockerfile
      --destination $CI_REGISTRY/$CI_PROJECT_PATH/model-backend:$CI_COMMIT_SHA
      --destination $CI_REGISTRY/$CI_PROJECT_PATH/model-backend:latest
  when: manual

# Alternative: Simple Docker build without DinD
.simple_build: &simple_build
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      alias: dockerdaemon
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - until docker info >/dev/null 2>&1; do echo "Waiting for Docker daemon..."; sleep 1; done
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  timeout: 30m

build-web-frontend-docker:
  <<: *simple_build
  script:
    - cd web-frontend
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/web-frontend:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/web-frontend:latest .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/web-frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/web-frontend:latest
  when: manual

build-web-backend-docker:
  <<: *simple_build
  script:
    - cd web-backend
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/web-backend:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/web-backend:latest .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/web-backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/web-backend:latest
  when: manual

build-model-backend-docker:
  <<: *simple_build
  script:
    - cd model-backend
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/model-backend:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/model-backend:latest .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/model-backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/model-backend:latest
  when: manual